@page "/AdminSide/GetAllCourses"
@using DanCode_Blazor.Components.Layout
@using DanCode_Blazor.Components.Pages.Utilites
@using DanCode_Blazor.Providers
@using DanCode_Blazor.Services.Base.interfaces;
@using Microsoft.AspNetCore.Http.Extensions;
@using global::Services.Base.interfaces
@layout AdminPanelLayout;

<style>
    .divbackground {
        background-color: #0b6131 !important;
        color: white;
    }

    .formbackground {
        background-color: #F7F9F2 !important;
    }

    .but {
        background-color: #0b6131 !important;
    }

    .table thead th {
        background-color: #0b6131;
        color: white;
        text-align: center;
    }

    .table tbody td, .table tbody th {
        text-align: center;
        vertical-align: middle;
    }

    .table tbody tr:hover {
        background-color: #f2f2f2;
    }

    .btn-custom {
        margin: 0 2px;
    }

    .card {
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    }

    .btn-primary {
        background-color: #0b6131 !important;
        border: none;
    }

    .btn-danger {
        background-color: #ff4d4d !important;
        border: none;
    }

        .btn-primary:hover, .btn-danger:hover {
            opacity: 0.9;
        }
</style>



<div class="container mt-4">

    <div>
        <h2 class="text-center m-2  p-3 divbackground rounded">Courses</h2>
        <hr />

        <div class="my-3">
            <Button @onclick="GoToAddCourse" Class="btn btn-primary but">Add New Course</Button>
        </div>
    </div>

    @if (CourseReadonlyDTOs == null)
    {
        <LoadingSpinner />
    }

    else
    {
        <div class="card p-4 mb-4">

            <div class="table-responsive border p-2 m-2 rounded">

                <table class="table table-striped table-bordered table-hover">

                    <thead>
                        <tr>
                            <th scope="col">ID</th>
                            <th scope="col">Title</th>
                            <th scope="col">Time</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in CourseReadonlyDTOs)
                        {
                            <tr>
                                <th>@item.Id</th>
                                <td>@item.Title</td>
                                <td>@item.Time</td>
                                <td>
                                    <Button Class="btn btn-primary btn-sm btn-custom" @onclick="(()=>GoToEditCourse(item.Id))">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </Button>
                                    <Button Class="btn btn-danger btn-sm btn-custom" @onclick="(()=>ShowModal())">
                                        <i class="bi bi-trash"></i> Remove
                                    </Button>
                                    <TestModal @ref="myModal" Title="Remove Course" ShowCloseButton="true" ShowSaveButton="true" OnClose="OnModalClose" OnSave="(()=>OnModalSave(item.Id))">
                                        <p>Are You Sure To delete Course @item.Title</p>
                                    </TestModal>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (Message != null)
            {
                <div class="alert alert-danger" role="alert">
                    @Message
                </div>
            }

            <hr />
        </div>
    }

</div>
        











@code {


    [Inject] ICourseService CourseService { get; set; }
    [Inject] NavigationManager Navmanger { get; set; }


    [Inject] IUserService UserService { get; set; }
    [Inject] ApiAuthenticationStateProvider apiAuthenticationStateProvider { get; set; }
    private bool IsAdmin = false;


    List<CourseReadonlyDTO> CourseReadonlyDTOs { get; set; }
    private string? Message;


    private string userid;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState Authstate = await apiAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = Authstate.User;

        if (user.Identity.IsAuthenticated)
        {
            userid = user.Claims.FirstOrDefault(c => c.Type == "nameid")?.Value;
            var FirstName = user.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
            var LastName = user.Claims.FirstOrDefault(c => c.Type == "family_name")?.Value;
            var PhoneNumber = user.FindFirst(c => c.Type == "sub")?.Value;


        }

        var response = await UserService.IsAdmin(Convert.ToInt32(userid));
        IsAdmin = response.Data;


        if (IsAdmin)
        {
            var responsee = await CourseService.GetAllCourses();
            CourseReadonlyDTOs = responsee.Data;
        }

    }

    private async Task LoadCourses()
    {
        var response = await CourseService.GetAllCourses();
        CourseReadonlyDTOs = response.Data;
    }

    private async Task RemoveCourse(int CourseId)
    {
        var response = await CourseService.RemoveCourse(CourseId);
        if (response.Data)
        {
            Message = "Course successfully removed";
            await LoadCourses();
          
        }
        else
        {
            Message = "Error removing course";
        }
        StateHasChanged();

    }

    private async Task GoToEditCourse(int CourseId)
    {
        Navmanger.NavigateTo($"/AdminSide/EditCourse/{CourseId}");
    }

    private async Task GoToAddCourse()
    {
        Navmanger.NavigateTo("/AdminSide/AddCourse");
    }





    //Modal
    private TestModal myModal;

    private void ShowModal()
    {
        myModal.Open();
    }

    private void OnModalClose()
    {
        // Handle modal close event here
      
    }

    private async void OnModalSave(int CourseId)
    {
        await RemoveCourse(CourseId);

    }
}
