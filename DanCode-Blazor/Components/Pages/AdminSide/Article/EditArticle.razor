@page "/AdminSide/EditArticle/{ArticleId:int}"
@rendermode InteractiveServer

@using Application.Extensions.Generators.NameGenerator
@using DanCode_Blazor.Components.Layout
@using DanCode_Blazor.Components.Pages.Utilites
@using DanCode_Blazor.Providers
@using DanCode_Blazor.Services.Base.interfaces
@using global::Services.Base.interfaces

@layout AdminPanelLayout;

<PageTitle>Edit Article</PageTitle>

<style>
    .divbackground {
        background-color: #0b6131 !important;
        color: white;
    }

    .formbackground {
        background-color: #F7F9F2 !important;
    }

    .form-label {
        background-color: #0b6131;
        color: white;
        padding: 5px 10px;
        border-radius: 3px;
        display: inline-block;
        width: 100%; /* عرض لیبل‌ها را 100% عرض والد قرار می‌دهد */
        text-align: left; /* متن لیبل را به چپ تراز می‌کند */
        font-weight: bold; /* متن لیبل‌ها را پررنگ‌تر می‌کند */
        margin-bottom: 10px; /* فاصله کمی از عناصر زیرین ایجاد می‌کند */
    }


    .form-control, .form-control-file {
        border: 1px solid #0b6131;
        border-radius: 5px;
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);
        font-size: 16px;
    }

        .form-control:focus, .form-control-file:focus {
            border-color: #0b6131;
            box-shadow: 0 0 8px rgba(11, 97, 49, 0.8);
        }

    .btn-success {
        background-color: #0b6131;
        border-color: #0b6131;
    }

    .btn-danger {
        background-color: #b33a3a;
        border-color: #b33a3a;
    }

        .btn-danger:hover {
            background-color: #a33030;
        }

    .card {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    }

    .text-center {
        text-align: center;
    }

    hr {
        border: 1px solid #0b6131;
    }

    img {
        border: 2px solid #0b6131;
        border-radius: 10px;
    }

    video {
        border-radius: 10px;
    }

    h2, h3, h4 {
        color: #0b6131;
    }

    .alert-danger {
        background-color: #ffcccc;
        color: #b33a3a;
        border-radius: 5px;
        padding: 10px;
    }

    .list-group-item {
        border-radius: 5px;
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);
    }
</style>



<div class="container mt-4">

    <div>
        <h2 class="text-center m-2 p-3 divbackground rounded">Edit Article</h2>
        <hr />
    </div>



    <div class="card p-4 mb-4">

        <EditForm Model="ArticleDTO" OnValidSubmit="SendData" Context="editcontext">

            <DataAnnotationsValidator />


            <!-- Author -->
            <div class="form-group mb-3">
                <label for="author" class="form-label">Author</label>
                <InputText id="author" class="form-control" placeholder="Enter Author of This Course ex: Danial Khedri" @bind-Value="ArticleDTO.Author" />
                <ValidationMessage For="(() => ArticleDTO.Author)" />
            </div>

            <!-- Title -->
            <div class="form-group mb-3">
                <label for="title" class="form-label">Title</label>
                <InputText id="title" class="form-control" placeholder="Enter Title of Course ex: 1v1 Competition" @bind-Value="ArticleDTO.Title" />
                <ValidationMessage For="(() => ArticleDTO.Title)" />
            </div>

            <!-- Content -->
            <div class="form-group mb-3">
                <label for="description" class="form-label">Content</label>
                <InputTextArea id="description" class="form-control" placeholder="Enter Description of Course" @bind-Value="ArticleDTO.Content" />
                <ValidationMessage For="(() => ArticleDTO.Content)" />
            </div>


            <hr />

            <!-- Before Image -->
            <div class="form-group mb-3">
                <div>
                    <label for="image" class="form-label">Image</label>
                </div>
                @if (ArticleDTO.ImageURL != null)
                {
                    <img class="img-fluid rounded" style="max-width: 100%; height: auto;" src="/Images/Courses/@ArticleDTO.ImageURL" alt="Selected Image" />
                }
            </div>
            <hr />

            <!-- New Image -->
            <div class="form-group mb-3">
                <div>
                    <label for="image" class="form-label">Select New Image</label>
                </div>
                <InputFile id="image" OnChange="HandleSelectedFiles" class="form-control-file" />
                @if (!string.IsNullOrEmpty(imageDataUrl))
                {
                    <img class="img-fluid rounded mt-2" style="max-width:550px; max-height:400px;" src="@imageDataUrl" alt="Selected Image" />
                }
            </div>
            <hr />









            <!-- Submit Button -->
            <div class="text-center">
                <button class="btn btn-success" type="submit">Update Article</button>
            </div>

        </EditForm>
    </div>


    @if (Message != null)
    {
        <div class="alert alert-danger" role="alert">
            @Message
        </div>
    }

    @if (isCopying)
    {
        <div class="text-center mt-4">
            <LoadingSpinner></LoadingSpinner>
            <h2>Please Wait...</h2>
        </div>
    }


</div>










@code {
    [Inject] IClient client { get; set; }
    [Inject] IArticleService ArticleService { get; set; }
    [Inject] NavigationManager NavManager { get; set; }

    [Parameter] public int ArticleId { get; set; }

    private bool isCopying = false;
    private string Message;
    private string imageDataUrl;
    private IBrowserFile ImageFormFile { get; set; }
    private ArticleReadonlyDTO ArticleDTO = new();


    [Inject] IUserService UserService { get; set; }




    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        ImageFormFile = e.File;
        if (ImageFormFile != null)
        {
            using var memoryStream = new MemoryStream();
            await ImageFormFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(memoryStream); // Max file size of 10 MB
            imageDataUrl = $"data:{ImageFormFile.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }



    private async Task SaveFileAsync(IBrowserFile file, string filePath, long maxSize = 2000 * 1024 * 1024)
    {
        Directory.CreateDirectory(Path.GetDirectoryName(filePath));
        using var stream = file.OpenReadStream(maxSize);
        using var fileStream = new FileStream(filePath, FileMode.Create);
        await stream.CopyToAsync(fileStream);
    }




    //Load Data
    protected override async Task OnParametersSetAsync()
    {

        var response = await ArticleService.GetArticleById(ArticleId);

        if (response.Success)
            ArticleDTO = response.Data;

        else
            Message = response.Message;

    }

    //Send Data To Server
    private async Task SendData()
    {
        isCopying = true;
        StateHasChanged();

        try
        {
            await UpdateImageAsync();
            await UpdateArticleAsync();
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
        finally
        {
            isCopying = false;
            StateHasChanged();
        }
    }

    public async Task UpdateImageAsync()
    {
        if (ImageFormFile != null)
        {
            // Delete old image if exists
            if (!string.IsNullOrEmpty(ArticleDTO.ImageURL))
            {
                var oldImagePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/Images/Articles", ArticleDTO.ImageURL);
                if (File.Exists(oldImagePath))
                {
                    File.Delete(oldImagePath);
                }
            }

            // Save new image
            ArticleDTO.ImageURL = NameGenerator.GenerateUniqCode() + Path.GetExtension(ImageFormFile.Name);
            string imagePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/Images/Articles", ArticleDTO.ImageURL);
            using (var stream = ImageFormFile.OpenReadStream())
            {
                using (var fileStream = new FileStream(imagePath, FileMode.Create))
                {
                    await stream.CopyToAsync(fileStream);
                }
            }
        }
    }


    public async Task UpdateArticleAsync()
    {
        var editDTO = new ArticleEditDTO
            {
                Id = ArticleDTO.Id,
                Author = ArticleDTO.Author,
                Title = ArticleDTO.Title,
                Content = ArticleDTO.Content,
                ImageURL = ArticleDTO.ImageURL,
            };

        var response = await ArticleService.EditArticle(editDTO);

        if (response.Data == false)
        {
            Message = "Error updating course";
        }
        else
        {
            Message = "Course updated successfully";
        }
    }




}
