@page "/AdminSide/GetAllDrills"
@using DanCode_Blazor.Components.Layout
@using DanCode_Blazor.Components.Pages.Utilites
@using DanCode_Blazor.Services.Base.interfaces;
@using Microsoft.AspNetCore.Http.Extensions
@layout AdminPanelLayout;


<style>
    .divbackground {
        background-color: #0b6131 !important;
        color: white;
    }

    .formbackground {
        background-color: #F7F9F2 !important;
    }

    .but {
        background-color: #0b6131 !important;
    }

    .table thead th {
        background-color: #0b6131;
        color: white;
        text-align: center;
    }

    .table tbody td, .table tbody th {
        text-align: center;
        vertical-align: middle;
    }

    .table tbody tr:hover {
        background-color: #f2f2f2;
    }

    .btn-custom {
        margin: 0 2px;
    }

    .card {
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    }

    .btn-primary {
        background-color: #0b6131 !important;
        border: none;
    }

    .btn-danger {
        background-color: #ff4d4d !important;
        border: none;
    }

        .btn-primary:hover, .btn-danger:hover {
            opacity: 0.9;
        }
</style>



<div class="container mt-4">


    <div>

        <h2 class="text-center m-2  p-3 divbackground rounded">Drills</h2>
        <hr />

        <div class="my-3">
            <Button @onclick="GoToAddDrill" Class="btn btn-primary but">Add New Drill</Button>
            <Button @onclick="GoToDrillTypes" Class="btn btn-primary but">DrillTypes</Button>
            <Button @onclick="GoToDrillAges" Class="btn btn-primary but">DrillAges</Button>
        </div>

    </div>

    @if (DrillReadonlyDTOs == null)
    {
        <LoadingSpinner />
    }

    else
    {
        <div class="card p-4 mb-4">

            <div class="table-responsive border p-2 m-2 rounded">

                <table class="table table-striped table-bordered table-hover">



                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Title</th>
                            <th scope="col">CreateDate</th>
                            <th>Actions</th>
                        </tr>
                    </thead>

                    <tbody>

                        @foreach (var item in DrillReadonlyDTOs)
                        {
                            <tr>
                                <th scope="row">@item.Id</th>
                                <td>@item.Title</td>
                                <td>@item.CreateDate</td>

                                <td>
                                    <Button Class="btn btn-primary btn-sm btn-custom" @onclick="(()=>GoToEditDrill(item.Id))">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </Button>
                                    <Button Class="btn btn-danger btn-sm btn-custom" @onclick="(()=>ShowModal())">
                                        <i class="bi bi-trash"></i> Remove
                                    </Button>
                                    <TestModal @ref="myModal" Title="Remove Drill" ShowCloseButton="true" ShowSaveButton="true" OnClose="OnModalClose" OnSave="(()=>OnModalSave(item.Id))">
                                        <p>Are You Sure To delete Drill @item.Title</p>
                                    </TestModal>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

</div>









@code {

    [Inject] IDrillService DrillService { get; set; }
    [Inject] NavigationManager Navmanger { get; set; }

    List<DrillReadonlyDTO> DrillReadonlyDTOs { get; set; }

    private string Message;

    protected override async Task OnInitializedAsync()
    {
        await LoadDrills();


    }

    private async Task RemoveDrill(int DrillId)
    {

        var response = await DrillService.RemoveDrill(DrillId);

        if (response.Data)
        {

            Message = "Drill Successfuly Removed";
            await LoadDrills();
        }
        else
        {

            Message = "Error";
        }

        StateHasChanged();

    }

    public async Task LoadDrills()
    {

        var response = await DrillService.GetAllDrills();

        DrillReadonlyDTOs = response.Data;
    }

    private async Task GoToAddDrill()
    {
        Navmanger.NavigateTo($"/AdminSide/AddDrill");
    }

    private async Task GoToDrillTypes()
    {
        Navmanger.NavigateTo($"/AdminSide/GetAllDrillTypes");
    }

    private async Task GoToDrillAges()
    {
        Navmanger.NavigateTo($"/AdminSide/GetAllDrillAges");
    }

    private async Task GoToEditDrill(int DrillId)
    {

        Navmanger.NavigateTo($"/EditDrill/{DrillId}");

    }

    //Modal

    private TestModal myModal;

    private void ShowModal()
    {
        myModal.Open();
    }

    private void OnModalClose()
    {
        // Handle modal close event here

    }

    private async void OnModalSave(int DrillId)
    {
        await RemoveDrill(DrillId);

 


    }
}
